(* A handwritten Why3 input for a token contract. *)

module UInt256
	use import mach.int.Unsigned
	type uint256
	constant max_uint256: int = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
	clone export mach.int.Unsigned with
		type t = uint256,
		constant max = max_uint256
end

module Address
	use import mach.int.Unsigned
	type address
	constant max_address: int = 0xffffffffffffffffffffffffffffffffffffffff (* 160 bit = 40 f's *)
	clone export mach.int.Unsigned with
		type t = address,
		constant max = max_address
end

module BalanceSum
	use import array.Array
	use import UInt256

	function lookup (array uint256) int : int

	clone export sum.Sum with
		type container = array uint256,
		function f = lookup
end

module TokenContract (* or a theory? *)

	use Address
	use BalanceSum
	use import UInt256

	use import array.Array

	(* TODO: turn this into a lemma *)
	axiom blanceSub :
		forall _lim _orig _idx _val _new_val.
			to_int _new_val = to_int (Array.get _orig _idx) - to_int _val ->
			0 <= _idx < _lim ->
			BalanceSum.sum (Array.set _orig _idx _new_val) 0 _lim = BalanceSum.sum _orig 0 _lim - to_int _val

	(* TODO: turn this into a lemma *)
	axiom blanceAdd :
		forall _orig _idx _val _lim _new_val.
			to_int _new_val = to_int (Array.get _orig _idx) + to_int _val ->
			0 <= _idx < _lim ->
			BalanceSum.sum (Array.set _orig _idx _new_val) 0 _lim = BalanceSum.sum _orig 0 _lim + to_int _val

	exception Revert

	constant total : int
	axiom total_small : total <= max_uint256

	axiom small_elements :
		forall _array _idx _lim.
			0 <= _idx <= _lim ->
			to_int _array[_idx] <= BalanceSum.sum _array 0 (_lim + 1)

	let transfer (_from : Address.address) (_to : Address.address) (_val : uint256) (_orig : array uint256) : array uint256

		requires { _orig.length = Address.max_address + 1 }
		ensures  { _orig.length = Address.max_address + 1 }

		requires { BalanceSum.sum _orig 0 (Address.max_address + 1) = total }
		ensures { BalanceSum.sum _orig 0 (Address.max_address + 1) = total }

	=
		let backup = _orig in
		try
			if _orig[Address.to_int _from] < _val then raise Revert else
			_orig[Address.to_int _from] <- _orig[Address.to_int _from] - _val;
			assert { BalanceSum.sum _orig 0 (Address.max_address + 1) = total - to_int _val };
			assert { 0 <= Address.to_int _to };
			assert { Address.to_int _to <= Address.max_address };
			assert { to_int _orig[Address.to_int _to] <= BalanceSum.sum _orig 0 (Address.max_address + 1) };
			_orig[Address.to_int _to] <- _orig[Address.to_int _to] + _val;
			_orig
		with
			Revert -> backup
		end
end
